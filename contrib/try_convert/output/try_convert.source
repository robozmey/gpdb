-- SCRIPT-GENERATED TEST for TRY_CONVERT
-- Tests 31 types of 91 from pg_types.h
-- Tests 111 cast of 206 from pg_cast.h
-- Tests 1 types of 1 from extensions
-- Tests 5 casts of 8 from extensions
create schema tryconvert;
set search_path = tryconvert;
-- start_ignore
CREATE EXTENSION IF NOT EXISTS try_convert;
-- end_ignore
select add_type_for_try_convert('int8'::regtype);select add_type_for_try_convert('int4'::regtype);select add_type_for_try_convert('int2'::regtype);select add_type_for_try_convert('float8'::regtype);select add_type_for_try_convert('float4'::regtype);select add_type_for_try_convert('numeric'::regtype);select add_type_for_try_convert('complex'::regtype);select add_type_for_try_convert('bool'::regtype);select add_type_for_try_convert('bit'::regtype);select add_type_for_try_convert('varbit'::regtype);select add_type_for_try_convert('date'::regtype);select add_type_for_try_convert('time'::regtype);select add_type_for_try_convert('timetz'::regtype);select add_type_for_try_convert('timestamp'::regtype);select add_type_for_try_convert('timestamptz'::regtype);select add_type_for_try_convert('interval'::regtype);select add_type_for_try_convert('abstime'::regtype);select add_type_for_try_convert('reltime'::regtype);select add_type_for_try_convert('point'::regtype);select add_type_for_try_convert('cidr'::regtype);select add_type_for_try_convert('inet'::regtype);select add_type_for_try_convert('macaddr'::regtype);select add_type_for_try_convert('json'::regtype);select add_type_for_try_convert('jsonb'::regtype);select add_type_for_try_convert('xml'::regtype);select add_type_for_try_convert('char'::regtype);select add_type_for_try_convert('varchar'::regtype);select add_type_for_try_convert('text'::regtype);select add_type_for_try_convert('money'::regtype);select add_type_for_try_convert('uuid'::regtype);select add_type_for_try_convert('regtype'::regtype);select add_type_for_try_convert('citext'::regtype);-- start_ignore
CREATE EXTENSION IF NOT EXISTS citext;
-- end_ignore
CREATE FUNCTION try_convert_by_sql_text(_in text, INOUT _out ANYELEMENT, source_type text)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::%s::%s', $1, source_type, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_text_with_len_out(_in text, INOUT _out ANYELEMENT, source_type text, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::%s::%s(%s)', $1, source_type, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in int8, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::int8::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in int8, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::int8::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in int4, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::int4::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in int4, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::int4::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in int2, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::int2::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in int2, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::int2::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in float8, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::float8::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in float8, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::float8::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in float4, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::float4::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in float4, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::float4::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in numeric, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::numeric::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in numeric, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::numeric::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in complex, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::complex::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in complex, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::complex::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in bool, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::bool::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in bool, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::bool::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in bit, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::bit::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in bit, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::bit::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in varbit, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::varbit::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in varbit, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::varbit::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in date, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::date::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in date, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::date::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in time, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::time::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in time, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::time::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in timetz, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::timetz::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in timetz, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::timetz::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in timestamp, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::timestamp::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in timestamp, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::timestamp::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in timestamptz, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::timestamptz::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in timestamptz, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::timestamptz::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in interval, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::interval::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in interval, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::interval::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in abstime, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::abstime::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in abstime, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::abstime::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in reltime, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::reltime::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in reltime, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::reltime::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in point, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::point::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in point, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::point::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in cidr, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::cidr::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in cidr, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::cidr::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in inet, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::inet::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in inet, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::inet::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in macaddr, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::macaddr::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in macaddr, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::macaddr::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in json, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::json::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in json, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::json::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in jsonb, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::jsonb::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in jsonb, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::jsonb::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in xml, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::xml::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in xml, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::xml::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in char, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::char::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in char, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::char::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in varchar, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::varchar::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in varchar, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::varchar::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in text, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::text::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in text, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::text::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in money, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::money::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in money, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::money::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in uuid, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::uuid::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in uuid, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::uuid::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in regtype, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::regtype::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in regtype, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::regtype::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql_with_len_out(_in citext, INOUT _out ANYELEMENT, len_out int)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::citext::%s(%s)', $1, pg_typeof(_out), len_out::text)
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
CREATE FUNCTION try_convert_by_sql(_in citext, INOUT _out ANYELEMENT)
  LANGUAGE plpgsql AS
$func$
    BEGIN
        EXECUTE format('SELECT %L::citext::%s', $1, pg_typeof(_out))
        INTO  _out;
        EXCEPTION WHEN others THEN
        -- do nothing: _out already carries default
    END
$func$;
-- LOAD DATA
CREATE TABLE tt_temp (v text) DISTRIBUTED BY (v);
CREATE TABLE tt_int8 (id serial, v int8) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_int8.data';
INSERT INTO tt_int8(id, v) SELECT row_number() OVER(), v::int8 from tt_temp;
CREATE TABLE tt_text_of_int8 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_int8(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_int8 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_int8(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_int8 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_int8(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_int8 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_int8(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_int8 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_int8(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_int8 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_int8(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_int8 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_int8(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_int8 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_int8(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_int8 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_int8(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_int8 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_int8(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_int8 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_int8(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_int8 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_int8(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_int4 (id serial, v int4) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_int4.data';
INSERT INTO tt_int4(id, v) SELECT row_number() OVER(), v::int4 from tt_temp;
CREATE TABLE tt_text_of_int4 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_int4(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_int4 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_int4(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_int4 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_int4(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_int4 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_int4(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_int4 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_int4(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_int4 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_int4(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_int4 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_int4(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_int4 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_int4(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_int4 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_int4(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_int4 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_int4(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_int4 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_int4(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_int4 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_int4(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_int2 (id serial, v int2) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_int2.data';
INSERT INTO tt_int2(id, v) SELECT row_number() OVER(), v::int2 from tt_temp;
CREATE TABLE tt_text_of_int2 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_int2(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_int2 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_int2(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_int2 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_int2(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_int2 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_int2(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_int2 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_int2(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_int2 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_int2(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_int2 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_int2(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_int2 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_int2(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_int2 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_int2(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_int2 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_int2(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_int2 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_int2(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_int2 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_int2(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_float8 (id serial, v float8) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_float8.data';
INSERT INTO tt_float8(id, v) SELECT row_number() OVER(), v::float8 from tt_temp;
CREATE TABLE tt_text_of_float8 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_float8(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_float8 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_float8(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_float8 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_float8(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_float8 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_float8(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_float8 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_float8(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_float8 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_float8(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_float8 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_float8(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_float8 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_float8(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_float8 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_float8(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_float8 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_float8(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_float8 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_float8(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_float8 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_float8(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_float4 (id serial, v float4) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_float4.data';
INSERT INTO tt_float4(id, v) SELECT row_number() OVER(), v::float4 from tt_temp;
CREATE TABLE tt_text_of_float4 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_float4(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_float4 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_float4(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_float4 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_float4(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_float4 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_float4(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_float4 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_float4(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_float4 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_float4(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_float4 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_float4(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_float4 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_float4(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_float4 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_float4(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_float4 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_float4(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_float4 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_float4(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_float4 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_float4(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_numeric (id serial, v numeric) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_numeric.data';
INSERT INTO tt_numeric(id, v) SELECT row_number() OVER(), v::numeric from tt_temp;
CREATE TABLE tt_text_of_numeric (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_numeric(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_numeric (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_numeric(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_numeric (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_numeric(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_numeric (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_numeric(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_numeric (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_numeric(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_numeric (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_numeric(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_numeric (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_numeric(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_numeric (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_numeric(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_numeric (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_numeric(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_numeric (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_numeric(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_numeric (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_numeric(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_numeric (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_numeric(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_complex (id serial, v complex) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_complex.data';
INSERT INTO tt_complex(id, v) SELECT row_number() OVER(), v::complex from tt_temp;
CREATE TABLE tt_text_of_complex (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_complex(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_complex (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_complex(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_complex (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_complex(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_complex (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_complex(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_complex (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_complex(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_complex (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_complex(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_complex (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_complex(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_complex (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_complex(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_complex (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_complex(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_complex (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_complex(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_complex (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_complex(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_complex (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_complex(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_bool (id serial, v bool) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_bool.data';
INSERT INTO tt_bool(id, v) SELECT row_number() OVER(), v::bool from tt_temp;
CREATE TABLE tt_text_of_bool (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_bool(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_bool (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_bool(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_bool (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_bool(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_bool (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_bool(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_bool (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_bool(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_bool (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_bool(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_bool (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_bool(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_bool (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_bool(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_bool (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_bool(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_bool (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_bool(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_bool (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_bool(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_bool (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_bool(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_bit (id serial, v bit) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_bit.data';
INSERT INTO tt_bit(id, v) SELECT row_number() OVER(), v::bit from tt_temp;
CREATE TABLE tt_text_of_bit (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_bit(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_bit (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_bit(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_bit (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_bit(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_bit (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_bit(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_bit (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_bit(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_bit (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_bit(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_bit (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_bit(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_bit (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_bit(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_bit (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_bit(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_bit (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_bit(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_bit (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_bit(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_bit (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_bit(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_bit_1 (id serial, v bit(1)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_bit.data';
INSERT INTO tt_bit_1(id, v) SELECT row_number() OVER(), v::bit(1) from tt_temp;
CREATE TABLE tt_text_of_bit_1 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_bit_1(id, v) SELECT row_number() OVER(), v::bit(1)::text from tt_temp;
CREATE TABLE tt_citext_of_bit_1 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_bit_1(id, v) SELECT row_number() OVER(), v::bit(1)::citext from tt_temp;
CREATE TABLE tt_char_of_bit_1 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_bit_1(id, v) SELECT row_number() OVER(), v::bit(1)::char from tt_temp;
CREATE TABLE tt_char_1_of_bit_1 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_bit_1(id, v) SELECT row_number() OVER(), v::bit(1)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_bit_1 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_bit_1(id, v) SELECT row_number() OVER(), v::bit(1)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_bit_1 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_bit_1(id, v) SELECT row_number() OVER(), v::bit(1)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_bit_1 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_bit_1(id, v) SELECT row_number() OVER(), v::bit(1)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_bit_1 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_bit_1(id, v) SELECT row_number() OVER(), v::bit(1)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_bit_1 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_bit_1(id, v) SELECT row_number() OVER(), v::bit(1)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_bit_1 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_bit_1(id, v) SELECT row_number() OVER(), v::bit(1)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_bit_1 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_bit_1(id, v) SELECT row_number() OVER(), v::bit(1)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_bit_1 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_bit_1(id, v) SELECT row_number() OVER(), v::bit(1)::varchar(20) from tt_temp;
CREATE TABLE tt_bit_5 (id serial, v bit(5)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_bit.data';
INSERT INTO tt_bit_5(id, v) SELECT row_number() OVER(), v::bit(5) from tt_temp;
CREATE TABLE tt_text_of_bit_5 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_bit_5(id, v) SELECT row_number() OVER(), v::bit(5)::text from tt_temp;
CREATE TABLE tt_citext_of_bit_5 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_bit_5(id, v) SELECT row_number() OVER(), v::bit(5)::citext from tt_temp;
CREATE TABLE tt_char_of_bit_5 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_bit_5(id, v) SELECT row_number() OVER(), v::bit(5)::char from tt_temp;
CREATE TABLE tt_char_1_of_bit_5 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_bit_5(id, v) SELECT row_number() OVER(), v::bit(5)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_bit_5 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_bit_5(id, v) SELECT row_number() OVER(), v::bit(5)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_bit_5 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_bit_5(id, v) SELECT row_number() OVER(), v::bit(5)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_bit_5 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_bit_5(id, v) SELECT row_number() OVER(), v::bit(5)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_bit_5 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_bit_5(id, v) SELECT row_number() OVER(), v::bit(5)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_bit_5 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_bit_5(id, v) SELECT row_number() OVER(), v::bit(5)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_bit_5 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_bit_5(id, v) SELECT row_number() OVER(), v::bit(5)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_bit_5 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_bit_5(id, v) SELECT row_number() OVER(), v::bit(5)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_bit_5 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_bit_5(id, v) SELECT row_number() OVER(), v::bit(5)::varchar(20) from tt_temp;
CREATE TABLE tt_bit_10 (id serial, v bit(10)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_bit.data';
INSERT INTO tt_bit_10(id, v) SELECT row_number() OVER(), v::bit(10) from tt_temp;
CREATE TABLE tt_text_of_bit_10 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_bit_10(id, v) SELECT row_number() OVER(), v::bit(10)::text from tt_temp;
CREATE TABLE tt_citext_of_bit_10 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_bit_10(id, v) SELECT row_number() OVER(), v::bit(10)::citext from tt_temp;
CREATE TABLE tt_char_of_bit_10 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_bit_10(id, v) SELECT row_number() OVER(), v::bit(10)::char from tt_temp;
CREATE TABLE tt_char_1_of_bit_10 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_bit_10(id, v) SELECT row_number() OVER(), v::bit(10)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_bit_10 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_bit_10(id, v) SELECT row_number() OVER(), v::bit(10)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_bit_10 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_bit_10(id, v) SELECT row_number() OVER(), v::bit(10)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_bit_10 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_bit_10(id, v) SELECT row_number() OVER(), v::bit(10)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_bit_10 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_bit_10(id, v) SELECT row_number() OVER(), v::bit(10)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_bit_10 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_bit_10(id, v) SELECT row_number() OVER(), v::bit(10)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_bit_10 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_bit_10(id, v) SELECT row_number() OVER(), v::bit(10)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_bit_10 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_bit_10(id, v) SELECT row_number() OVER(), v::bit(10)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_bit_10 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_bit_10(id, v) SELECT row_number() OVER(), v::bit(10)::varchar(20) from tt_temp;
CREATE TABLE tt_bit_20 (id serial, v bit(20)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_bit.data';
INSERT INTO tt_bit_20(id, v) SELECT row_number() OVER(), v::bit(20) from tt_temp;
CREATE TABLE tt_text_of_bit_20 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_bit_20(id, v) SELECT row_number() OVER(), v::bit(20)::text from tt_temp;
CREATE TABLE tt_citext_of_bit_20 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_bit_20(id, v) SELECT row_number() OVER(), v::bit(20)::citext from tt_temp;
CREATE TABLE tt_char_of_bit_20 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_bit_20(id, v) SELECT row_number() OVER(), v::bit(20)::char from tt_temp;
CREATE TABLE tt_char_1_of_bit_20 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_bit_20(id, v) SELECT row_number() OVER(), v::bit(20)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_bit_20 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_bit_20(id, v) SELECT row_number() OVER(), v::bit(20)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_bit_20 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_bit_20(id, v) SELECT row_number() OVER(), v::bit(20)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_bit_20 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_bit_20(id, v) SELECT row_number() OVER(), v::bit(20)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_bit_20 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_bit_20(id, v) SELECT row_number() OVER(), v::bit(20)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_bit_20 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_bit_20(id, v) SELECT row_number() OVER(), v::bit(20)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_bit_20 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_bit_20(id, v) SELECT row_number() OVER(), v::bit(20)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_bit_20 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_bit_20(id, v) SELECT row_number() OVER(), v::bit(20)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_bit_20 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_bit_20(id, v) SELECT row_number() OVER(), v::bit(20)::varchar(20) from tt_temp;
CREATE TABLE tt_varbit (id serial, v varbit) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_varbit.data';
INSERT INTO tt_varbit(id, v) SELECT row_number() OVER(), v::varbit from tt_temp;
CREATE TABLE tt_text_of_varbit (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_varbit(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_varbit (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_varbit(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_varbit (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_varbit(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_varbit (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_varbit(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_varbit (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_varbit(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_varbit (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_varbit(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_varbit (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_varbit(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_varbit (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_varbit(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_varbit (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_varbit(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_varbit (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_varbit(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_varbit (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_varbit(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_varbit (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_varbit(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_varbit_1 (id serial, v varbit(1)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_varbit.data';
INSERT INTO tt_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1) from tt_temp;
CREATE TABLE tt_text_of_varbit_1 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1)::text from tt_temp;
CREATE TABLE tt_citext_of_varbit_1 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1)::citext from tt_temp;
CREATE TABLE tt_char_of_varbit_1 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1)::char from tt_temp;
CREATE TABLE tt_char_1_of_varbit_1 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_varbit_1 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_varbit_1 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_varbit_1 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_varbit_1 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_varbit_1 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_varbit_1 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_varbit_1 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_varbit_1 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_varbit_1(id, v) SELECT row_number() OVER(), v::varbit(1)::varchar(20) from tt_temp;
CREATE TABLE tt_varbit_5 (id serial, v varbit(5)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_varbit.data';
INSERT INTO tt_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5) from tt_temp;
CREATE TABLE tt_text_of_varbit_5 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5)::text from tt_temp;
CREATE TABLE tt_citext_of_varbit_5 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5)::citext from tt_temp;
CREATE TABLE tt_char_of_varbit_5 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5)::char from tt_temp;
CREATE TABLE tt_char_1_of_varbit_5 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_varbit_5 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_varbit_5 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_varbit_5 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_varbit_5 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_varbit_5 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_varbit_5 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_varbit_5 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_varbit_5 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_varbit_5(id, v) SELECT row_number() OVER(), v::varbit(5)::varchar(20) from tt_temp;
CREATE TABLE tt_varbit_10 (id serial, v varbit(10)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_varbit.data';
INSERT INTO tt_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10) from tt_temp;
CREATE TABLE tt_text_of_varbit_10 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10)::text from tt_temp;
CREATE TABLE tt_citext_of_varbit_10 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10)::citext from tt_temp;
CREATE TABLE tt_char_of_varbit_10 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10)::char from tt_temp;
CREATE TABLE tt_char_1_of_varbit_10 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_varbit_10 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_varbit_10 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_varbit_10 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_varbit_10 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_varbit_10 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_varbit_10 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_varbit_10 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_varbit_10 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_varbit_10(id, v) SELECT row_number() OVER(), v::varbit(10)::varchar(20) from tt_temp;
CREATE TABLE tt_varbit_20 (id serial, v varbit(20)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_varbit.data';
INSERT INTO tt_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20) from tt_temp;
CREATE TABLE tt_text_of_varbit_20 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20)::text from tt_temp;
CREATE TABLE tt_citext_of_varbit_20 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20)::citext from tt_temp;
CREATE TABLE tt_char_of_varbit_20 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20)::char from tt_temp;
CREATE TABLE tt_char_1_of_varbit_20 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_varbit_20 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_varbit_20 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_varbit_20 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_varbit_20 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_varbit_20 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_varbit_20 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_varbit_20 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_varbit_20 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_varbit_20(id, v) SELECT row_number() OVER(), v::varbit(20)::varchar(20) from tt_temp;
CREATE TABLE tt_date (id serial, v date) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_date.data';
INSERT INTO tt_date(id, v) SELECT row_number() OVER(), v::date from tt_temp;
CREATE TABLE tt_text_of_date (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_date(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_date (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_date(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_date (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_date(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_date (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_date(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_date (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_date(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_date (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_date(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_date (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_date(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_date (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_date(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_date (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_date(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_date (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_date(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_date (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_date(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_date (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_date(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_time (id serial, v time) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_time.data';
INSERT INTO tt_time(id, v) SELECT row_number() OVER(), v::time from tt_temp;
CREATE TABLE tt_text_of_time (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_time(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_time (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_time(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_time (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_time(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_time (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_time(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_time (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_time(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_time (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_time(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_time (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_time(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_time (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_time(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_time (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_time(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_time (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_time(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_time (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_time(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_time (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_time(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_timetz (id serial, v timetz) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_timetz.data';
INSERT INTO tt_timetz(id, v) SELECT row_number() OVER(), v::timetz from tt_temp;
CREATE TABLE tt_text_of_timetz (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_timetz(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_timetz (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_timetz(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_timetz (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_timetz(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_timetz (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_timetz(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_timetz (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_timetz(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_timetz (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_timetz(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_timetz (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_timetz(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_timetz (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_timetz(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_timetz (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_timetz(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_timetz (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_timetz(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_timetz (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_timetz(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_timetz (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_timetz(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_timestamp (id serial, v timestamp) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_timestamp.data';
INSERT INTO tt_timestamp(id, v) SELECT row_number() OVER(), v::timestamp from tt_temp;
CREATE TABLE tt_text_of_timestamp (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_timestamp(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_timestamp (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_timestamp(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_timestamp (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_timestamp(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_timestamp (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_timestamp(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_timestamp (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_timestamp(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_timestamp (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_timestamp(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_timestamp (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_timestamp(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_timestamp (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_timestamp(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_timestamp (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_timestamp(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_timestamp (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_timestamp(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_timestamp (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_timestamp(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_timestamp (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_timestamp(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_timestamptz (id serial, v timestamptz) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_timestamptz.data';
INSERT INTO tt_timestamptz(id, v) SELECT row_number() OVER(), v::timestamptz from tt_temp;
CREATE TABLE tt_text_of_timestamptz (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_timestamptz(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_timestamptz (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_timestamptz(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_timestamptz (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_timestamptz(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_timestamptz (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_timestamptz(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_timestamptz (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_timestamptz(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_timestamptz (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_timestamptz(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_timestamptz (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_timestamptz(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_timestamptz (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_timestamptz(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_timestamptz (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_timestamptz(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_timestamptz (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_timestamptz(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_timestamptz (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_timestamptz(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_timestamptz (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_timestamptz(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_interval (id serial, v interval) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_interval.data';
INSERT INTO tt_interval(id, v) SELECT row_number() OVER(), v::interval from tt_temp;
CREATE TABLE tt_text_of_interval (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_interval(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_interval (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_interval(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_interval (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_interval(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_interval (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_interval(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_interval (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_interval(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_interval (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_interval(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_interval (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_interval(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_interval (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_interval(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_interval (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_interval(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_interval (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_interval(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_interval (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_interval(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_interval (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_interval(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_abstime (id serial, v abstime) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_abstime.data';
INSERT INTO tt_abstime(id, v) SELECT row_number() OVER(), v::abstime from tt_temp;
CREATE TABLE tt_text_of_abstime (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_abstime(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_abstime (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_abstime(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_abstime (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_abstime(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_abstime (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_abstime(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_abstime (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_abstime(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_abstime (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_abstime(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_abstime (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_abstime(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_abstime (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_abstime(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_abstime (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_abstime(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_abstime (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_abstime(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_abstime (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_abstime(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_abstime (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_abstime(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_reltime (id serial, v reltime) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_reltime.data';
INSERT INTO tt_reltime(id, v) SELECT row_number() OVER(), v::reltime from tt_temp;
CREATE TABLE tt_text_of_reltime (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_reltime(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_reltime (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_reltime(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_reltime (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_reltime(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_reltime (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_reltime(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_reltime (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_reltime(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_reltime (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_reltime(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_reltime (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_reltime(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_reltime (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_reltime(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_reltime (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_reltime(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_reltime (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_reltime(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_reltime (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_reltime(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_reltime (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_reltime(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_point (id serial, v point) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_point.data';
INSERT INTO tt_point(id, v) SELECT row_number() OVER(), v::point from tt_temp;
CREATE TABLE tt_text_of_point (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_point(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_point (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_point(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_point (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_point(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_point (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_point(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_point (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_point(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_point (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_point(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_point (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_point(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_point (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_point(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_point (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_point(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_point (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_point(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_point (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_point(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_point (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_point(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_cidr (id serial, v cidr) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_cidr.data';
INSERT INTO tt_cidr(id, v) SELECT row_number() OVER(), v::cidr from tt_temp;
CREATE TABLE tt_text_of_cidr (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_cidr(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_cidr (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_cidr(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_cidr (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_cidr(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_cidr (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_cidr(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_cidr (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_cidr(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_cidr (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_cidr(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_cidr (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_cidr(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_cidr (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_cidr(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_cidr (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_cidr(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_cidr (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_cidr(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_cidr (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_cidr(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_cidr (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_cidr(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_inet (id serial, v inet) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_inet.data';
INSERT INTO tt_inet(id, v) SELECT row_number() OVER(), v::inet from tt_temp;
CREATE TABLE tt_text_of_inet (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_inet(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_inet (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_inet(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_inet (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_inet(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_inet (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_inet(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_inet (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_inet(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_inet (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_inet(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_inet (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_inet(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_inet (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_inet(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_inet (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_inet(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_inet (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_inet(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_inet (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_inet(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_inet (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_inet(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_macaddr (id serial, v macaddr) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_macaddr.data';
INSERT INTO tt_macaddr(id, v) SELECT row_number() OVER(), v::macaddr from tt_temp;
CREATE TABLE tt_text_of_macaddr (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_macaddr(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_macaddr (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_macaddr(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_macaddr (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_macaddr(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_macaddr (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_macaddr(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_macaddr (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_macaddr(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_macaddr (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_macaddr(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_macaddr (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_macaddr(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_macaddr (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_macaddr(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_macaddr (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_macaddr(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_macaddr (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_macaddr(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_macaddr (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_macaddr(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_macaddr (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_macaddr(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_json (id serial, v json) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_json.data';
INSERT INTO tt_json(id, v) SELECT row_number() OVER(), v::json from tt_temp;
CREATE TABLE tt_text_of_json (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_json(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_json (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_json(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_json (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_json(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_json (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_json(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_json (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_json(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_json (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_json(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_json (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_json(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_json (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_json(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_json (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_json(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_json (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_json(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_json (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_json(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_json (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_json(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_jsonb (id serial, v jsonb) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_jsonb.data';
INSERT INTO tt_jsonb(id, v) SELECT row_number() OVER(), v::jsonb from tt_temp;
CREATE TABLE tt_text_of_jsonb (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_jsonb(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_jsonb (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_jsonb(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_jsonb (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_jsonb(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_jsonb (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_jsonb(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_jsonb (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_jsonb(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_jsonb (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_jsonb(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_jsonb (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_jsonb(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_jsonb (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_jsonb(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_jsonb (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_jsonb(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_jsonb (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_jsonb(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_jsonb (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_jsonb(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_jsonb (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_jsonb(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_xml (id serial, v xml) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_xml.data';
INSERT INTO tt_xml(id, v) SELECT row_number() OVER(), v::xml from tt_temp;
CREATE TABLE tt_text_of_xml (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_xml(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_xml (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_xml(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_xml (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_xml(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_xml (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_xml(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_xml (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_xml(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_xml (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_xml(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_xml (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_xml(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_xml (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_xml(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_xml (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_xml(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_xml (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_xml(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_xml (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_xml(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_xml (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_xml(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_char (id serial, v char) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_char.data';
INSERT INTO tt_char(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_text_of_char (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_char(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_char (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_char(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_char (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_char(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_char (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_char(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_char (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_char(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_char (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_char(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_char (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_char(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_char (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_char(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_char (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_char(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_char (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_char(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_char (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_char(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_char (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_char(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_char_1 (id serial, v char(1)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_char.data';
INSERT INTO tt_char_1(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_text_of_char_1 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_char_1(id, v) SELECT row_number() OVER(), v::char(1)::text from tt_temp;
CREATE TABLE tt_citext_of_char_1 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_char_1(id, v) SELECT row_number() OVER(), v::char(1)::citext from tt_temp;
CREATE TABLE tt_char_of_char_1 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_char_1(id, v) SELECT row_number() OVER(), v::char(1)::char from tt_temp;
CREATE TABLE tt_char_1_of_char_1 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_char_1(id, v) SELECT row_number() OVER(), v::char(1)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_char_1 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_char_1(id, v) SELECT row_number() OVER(), v::char(1)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_char_1 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_char_1(id, v) SELECT row_number() OVER(), v::char(1)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_char_1 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_char_1(id, v) SELECT row_number() OVER(), v::char(1)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_char_1 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_char_1(id, v) SELECT row_number() OVER(), v::char(1)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_char_1 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_char_1(id, v) SELECT row_number() OVER(), v::char(1)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_char_1 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_char_1(id, v) SELECT row_number() OVER(), v::char(1)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_char_1 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_char_1(id, v) SELECT row_number() OVER(), v::char(1)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_char_1 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_char_1(id, v) SELECT row_number() OVER(), v::char(1)::varchar(20) from tt_temp;
CREATE TABLE tt_char_5 (id serial, v char(5)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_char.data';
INSERT INTO tt_char_5(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_text_of_char_5 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_char_5(id, v) SELECT row_number() OVER(), v::char(5)::text from tt_temp;
CREATE TABLE tt_citext_of_char_5 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_char_5(id, v) SELECT row_number() OVER(), v::char(5)::citext from tt_temp;
CREATE TABLE tt_char_of_char_5 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_char_5(id, v) SELECT row_number() OVER(), v::char(5)::char from tt_temp;
CREATE TABLE tt_char_1_of_char_5 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_char_5(id, v) SELECT row_number() OVER(), v::char(5)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_char_5 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_char_5(id, v) SELECT row_number() OVER(), v::char(5)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_char_5 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_char_5(id, v) SELECT row_number() OVER(), v::char(5)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_char_5 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_char_5(id, v) SELECT row_number() OVER(), v::char(5)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_char_5 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_char_5(id, v) SELECT row_number() OVER(), v::char(5)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_char_5 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_char_5(id, v) SELECT row_number() OVER(), v::char(5)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_char_5 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_char_5(id, v) SELECT row_number() OVER(), v::char(5)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_char_5 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_char_5(id, v) SELECT row_number() OVER(), v::char(5)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_char_5 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_char_5(id, v) SELECT row_number() OVER(), v::char(5)::varchar(20) from tt_temp;
CREATE TABLE tt_char_10 (id serial, v char(10)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_char.data';
INSERT INTO tt_char_10(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_text_of_char_10 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_char_10(id, v) SELECT row_number() OVER(), v::char(10)::text from tt_temp;
CREATE TABLE tt_citext_of_char_10 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_char_10(id, v) SELECT row_number() OVER(), v::char(10)::citext from tt_temp;
CREATE TABLE tt_char_of_char_10 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_char_10(id, v) SELECT row_number() OVER(), v::char(10)::char from tt_temp;
CREATE TABLE tt_char_1_of_char_10 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_char_10(id, v) SELECT row_number() OVER(), v::char(10)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_char_10 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_char_10(id, v) SELECT row_number() OVER(), v::char(10)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_char_10 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_char_10(id, v) SELECT row_number() OVER(), v::char(10)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_char_10 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_char_10(id, v) SELECT row_number() OVER(), v::char(10)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_char_10 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_char_10(id, v) SELECT row_number() OVER(), v::char(10)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_char_10 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_char_10(id, v) SELECT row_number() OVER(), v::char(10)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_char_10 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_char_10(id, v) SELECT row_number() OVER(), v::char(10)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_char_10 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_char_10(id, v) SELECT row_number() OVER(), v::char(10)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_char_10 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_char_10(id, v) SELECT row_number() OVER(), v::char(10)::varchar(20) from tt_temp;
CREATE TABLE tt_char_20 (id serial, v char(20)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_char.data';
INSERT INTO tt_char_20(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_text_of_char_20 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_char_20(id, v) SELECT row_number() OVER(), v::char(20)::text from tt_temp;
CREATE TABLE tt_citext_of_char_20 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_char_20(id, v) SELECT row_number() OVER(), v::char(20)::citext from tt_temp;
CREATE TABLE tt_char_of_char_20 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_char_20(id, v) SELECT row_number() OVER(), v::char(20)::char from tt_temp;
CREATE TABLE tt_char_1_of_char_20 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_char_20(id, v) SELECT row_number() OVER(), v::char(20)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_char_20 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_char_20(id, v) SELECT row_number() OVER(), v::char(20)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_char_20 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_char_20(id, v) SELECT row_number() OVER(), v::char(20)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_char_20 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_char_20(id, v) SELECT row_number() OVER(), v::char(20)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_char_20 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_char_20(id, v) SELECT row_number() OVER(), v::char(20)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_char_20 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_char_20(id, v) SELECT row_number() OVER(), v::char(20)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_char_20 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_char_20(id, v) SELECT row_number() OVER(), v::char(20)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_char_20 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_char_20(id, v) SELECT row_number() OVER(), v::char(20)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_char_20 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_char_20(id, v) SELECT row_number() OVER(), v::char(20)::varchar(20) from tt_temp;
CREATE TABLE tt_varchar (id serial, v varchar) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_varchar.data';
INSERT INTO tt_varchar(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_text_of_varchar (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_varchar(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_varchar (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_varchar(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_varchar (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_varchar(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_varchar (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_varchar(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_varchar (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_varchar(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_varchar (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_varchar(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_varchar (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_varchar(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_varchar (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_varchar(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_varchar (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_varchar(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_varchar (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_varchar(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_varchar (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_varchar(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_varchar (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_varchar(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_varchar_1 (id serial, v varchar(1)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_varchar.data';
INSERT INTO tt_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_text_of_varchar_1 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1)::text from tt_temp;
CREATE TABLE tt_citext_of_varchar_1 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1)::citext from tt_temp;
CREATE TABLE tt_char_of_varchar_1 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1)::char from tt_temp;
CREATE TABLE tt_char_1_of_varchar_1 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_varchar_1 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_varchar_1 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_varchar_1 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_varchar_1 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_varchar_1 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_varchar_1 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_varchar_1 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_varchar_1 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_varchar_1(id, v) SELECT row_number() OVER(), v::varchar(1)::varchar(20) from tt_temp;
CREATE TABLE tt_varchar_5 (id serial, v varchar(5)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_varchar.data';
INSERT INTO tt_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_text_of_varchar_5 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5)::text from tt_temp;
CREATE TABLE tt_citext_of_varchar_5 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5)::citext from tt_temp;
CREATE TABLE tt_char_of_varchar_5 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5)::char from tt_temp;
CREATE TABLE tt_char_1_of_varchar_5 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_varchar_5 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_varchar_5 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_varchar_5 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_varchar_5 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_varchar_5 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_varchar_5 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_varchar_5 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_varchar_5 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_varchar_5(id, v) SELECT row_number() OVER(), v::varchar(5)::varchar(20) from tt_temp;
CREATE TABLE tt_varchar_10 (id serial, v varchar(10)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_varchar.data';
INSERT INTO tt_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_text_of_varchar_10 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10)::text from tt_temp;
CREATE TABLE tt_citext_of_varchar_10 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10)::citext from tt_temp;
CREATE TABLE tt_char_of_varchar_10 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10)::char from tt_temp;
CREATE TABLE tt_char_1_of_varchar_10 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_varchar_10 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_varchar_10 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_varchar_10 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_varchar_10 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_varchar_10 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_varchar_10 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_varchar_10 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_varchar_10 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_varchar_10(id, v) SELECT row_number() OVER(), v::varchar(10)::varchar(20) from tt_temp;
CREATE TABLE tt_varchar_20 (id serial, v varchar(20)) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_varchar.data';
INSERT INTO tt_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_text_of_varchar_20 (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20)::text from tt_temp;
CREATE TABLE tt_citext_of_varchar_20 (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20)::citext from tt_temp;
CREATE TABLE tt_char_of_varchar_20 (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20)::char from tt_temp;
CREATE TABLE tt_char_1_of_varchar_20 (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20)::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_varchar_20 (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20)::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_varchar_20 (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20)::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_varchar_20 (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20)::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_varchar_20 (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20)::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_varchar_20 (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20)::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_varchar_20 (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20)::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_varchar_20 (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20)::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_varchar_20 (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_varchar_20(id, v) SELECT row_number() OVER(), v::varchar(20)::varchar(20) from tt_temp;
CREATE TABLE tt_text (id serial, v text) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_text.data';
INSERT INTO tt_text(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_text_of_text (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_text(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_text (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_text(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_text (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_text(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_text (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_text(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_text (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_text(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_text (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_text(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_text (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_text(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_text (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_text(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_text (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_text(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_text (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_text(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_text (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_text(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_text (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_text(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_money (id serial, v money) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_money.data';
INSERT INTO tt_money(id, v) SELECT row_number() OVER(), v::money from tt_temp;
CREATE TABLE tt_text_of_money (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_money(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_money (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_money(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_money (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_money(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_money (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_money(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_money (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_money(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_money (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_money(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_money (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_money(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_money (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_money(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_money (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_money(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_money (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_money(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_money (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_money(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_money (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_money(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_uuid (id serial, v uuid) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_uuid.data';
INSERT INTO tt_uuid(id, v) SELECT row_number() OVER(), v::uuid from tt_temp;
CREATE TABLE tt_text_of_uuid (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_uuid(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_uuid (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_uuid(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_uuid (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_uuid(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_uuid (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_uuid(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_uuid (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_uuid(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_uuid (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_uuid(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_uuid (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_uuid(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_uuid (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_uuid(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_uuid (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_uuid(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_uuid (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_uuid(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_uuid (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_uuid(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_uuid (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_uuid(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_regtype (id serial, v regtype) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_regtype.data';
INSERT INTO tt_regtype(id, v) SELECT row_number() OVER(), v::regtype from tt_temp;
CREATE TABLE tt_text_of_regtype (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_regtype(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_regtype (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_regtype(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_regtype (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_regtype(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_regtype (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_regtype(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_regtype (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_regtype(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_regtype (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_regtype(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_regtype (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_regtype(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_regtype (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_regtype(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_regtype (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_regtype(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_regtype (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_regtype(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_regtype (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_regtype(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_regtype (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_regtype(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
CREATE TABLE tt_citext (id serial, v citext) DISTRIBUTED BY (id);
DELETE FROM tt_temp;
COPY tt_temp from '@abs_srcdir@/data/tt_citext.data';
INSERT INTO tt_citext(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_text_of_citext (id serial, v text) DISTRIBUTED BY (id);
INSERT INTO tt_text_of_citext(id, v) SELECT row_number() OVER(), v::text from tt_temp;
CREATE TABLE tt_citext_of_citext (id serial, v citext) DISTRIBUTED BY (id);
INSERT INTO tt_citext_of_citext(id, v) SELECT row_number() OVER(), v::citext from tt_temp;
CREATE TABLE tt_char_of_citext (id serial, v char) DISTRIBUTED BY (id);
INSERT INTO tt_char_of_citext(id, v) SELECT row_number() OVER(), v::char from tt_temp;
CREATE TABLE tt_char_1_of_citext (id serial, v char(1)) DISTRIBUTED BY (id);
INSERT INTO tt_char_1_of_citext(id, v) SELECT row_number() OVER(), v::char(1) from tt_temp;
CREATE TABLE tt_char_5_of_citext (id serial, v char(5)) DISTRIBUTED BY (id);
INSERT INTO tt_char_5_of_citext(id, v) SELECT row_number() OVER(), v::char(5) from tt_temp;
CREATE TABLE tt_char_10_of_citext (id serial, v char(10)) DISTRIBUTED BY (id);
INSERT INTO tt_char_10_of_citext(id, v) SELECT row_number() OVER(), v::char(10) from tt_temp;
CREATE TABLE tt_char_20_of_citext (id serial, v char(20)) DISTRIBUTED BY (id);
INSERT INTO tt_char_20_of_citext(id, v) SELECT row_number() OVER(), v::char(20) from tt_temp;
CREATE TABLE tt_varchar_of_citext (id serial, v varchar) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_of_citext(id, v) SELECT row_number() OVER(), v::varchar from tt_temp;
CREATE TABLE tt_varchar_1_of_citext (id serial, v varchar(1)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_1_of_citext(id, v) SELECT row_number() OVER(), v::varchar(1) from tt_temp;
CREATE TABLE tt_varchar_5_of_citext (id serial, v varchar(5)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_5_of_citext(id, v) SELECT row_number() OVER(), v::varchar(5) from tt_temp;
CREATE TABLE tt_varchar_10_of_citext (id serial, v varchar(10)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_10_of_citext(id, v) SELECT row_number() OVER(), v::varchar(10) from tt_temp;
CREATE TABLE tt_varchar_20_of_citext (id serial, v varchar(20)) DISTRIBUTED BY (id);
INSERT INTO tt_varchar_20_of_citext(id, v) SELECT row_number() OVER(), v::varchar(20) from tt_temp;
-- TEXT TESTS
select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql(v, NULL::int8) as v2 from tt_text_of_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_text_of_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int2) as v1, try_convert_by_sql(v, NULL::int2) as v2 from tt_text_of_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float8) as v1, try_convert_by_sql(v, NULL::float8) as v2 from tt_text_of_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float4) as v1, try_convert_by_sql(v, NULL::float4) as v2 from tt_text_of_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::numeric) as v1, try_convert_by_sql(v, NULL::numeric) as v2 from tt_text_of_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_complex) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::complex) as v1, try_convert_by_sql(v, NULL::complex) as v2 from tt_text_of_complex) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bool) as v1, try_convert_by_sql(v, NULL::bool) as v2 from tt_text_of_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql(v, NULL::bit) as v2 from tt_text_of_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'bit(1)'::text) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 1) as v2 from tt_text_of_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'bit(5)'::text) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 5) as v2 from tt_text_of_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'bit(10)'::text) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 10) as v2 from tt_text_of_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'bit(20)'::text) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 20) as v2 from tt_text_of_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql(v, NULL::varbit) as v2 from tt_text_of_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'varbit(1)'::text) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 1) as v2 from tt_text_of_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'varbit(5)'::text) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 5) as v2 from tt_text_of_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'varbit(10)'::text) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 10) as v2 from tt_text_of_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'varbit(20)'::text) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 20) as v2 from tt_text_of_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_date) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::date) as v1, try_convert_by_sql(v, NULL::date) as v2 from tt_text_of_date) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::time) as v1, try_convert_by_sql(v, NULL::time) as v2 from tt_text_of_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_timetz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timetz) as v1, try_convert_by_sql(v, NULL::timetz) as v2 from tt_text_of_timetz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamp) as v1, try_convert_by_sql(v, NULL::timestamp) as v2 from tt_text_of_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamptz) as v1, try_convert_by_sql(v, NULL::timestamptz) as v2 from tt_text_of_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::interval) as v1, try_convert_by_sql(v, NULL::interval) as v2 from tt_text_of_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::abstime) as v1, try_convert_by_sql(v, NULL::abstime) as v2 from tt_text_of_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_reltime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::reltime) as v1, try_convert_by_sql(v, NULL::reltime) as v2 from tt_text_of_reltime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_point) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::point) as v1, try_convert_by_sql(v, NULL::point) as v2 from tt_text_of_point) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::cidr) as v1, try_convert_by_sql(v, NULL::cidr) as v2 from tt_text_of_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::inet) as v1, try_convert_by_sql(v, NULL::inet) as v2 from tt_text_of_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_macaddr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::macaddr) as v1, try_convert_by_sql(v, NULL::macaddr) as v2 from tt_text_of_macaddr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_json) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::json) as v1, try_convert_by_sql(v, NULL::json) as v2 from tt_text_of_json) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_jsonb) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::jsonb) as v1, try_convert_by_sql(v, NULL::jsonb) as v2 from tt_text_of_jsonb) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::xml) as v1, try_convert_by_sql(v, NULL::xml) as v2 from tt_text_of_xml) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_text_of_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'char(1)'::text) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 1) as v2 from tt_text_of_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'char(5)'::text) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 5) as v2 from tt_text_of_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'char(10)'::text) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 10) as v2 from tt_text_of_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'char(20)'::text) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 20) as v2 from tt_text_of_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_text_of_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 1) as v2 from tt_text_of_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 5) as v2 from tt_text_of_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 10) as v2 from tt_text_of_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 20) as v2 from tt_text_of_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_text_of_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_money) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::money) as v1, try_convert_by_sql(v, NULL::money) as v2 from tt_text_of_money) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_uuid) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::uuid) as v1, try_convert_by_sql(v, NULL::uuid) as v2 from tt_text_of_uuid) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_regtype) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::regtype) as v1, try_convert_by_sql(v, NULL::regtype) as v2 from tt_text_of_regtype) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_text_of_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql(v, NULL::int8) as v2 from tt_citext_of_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_citext_of_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int2) as v1, try_convert_by_sql(v, NULL::int2) as v2 from tt_citext_of_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float8) as v1, try_convert_by_sql(v, NULL::float8) as v2 from tt_citext_of_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float4) as v1, try_convert_by_sql(v, NULL::float4) as v2 from tt_citext_of_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::numeric) as v1, try_convert_by_sql(v, NULL::numeric) as v2 from tt_citext_of_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_complex) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::complex) as v1, try_convert_by_sql(v, NULL::complex) as v2 from tt_citext_of_complex) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bool) as v1, try_convert_by_sql(v, NULL::bool) as v2 from tt_citext_of_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql(v, NULL::bit) as v2 from tt_citext_of_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'bit(1)'::text) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 1) as v2 from tt_citext_of_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'bit(5)'::text) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 5) as v2 from tt_citext_of_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'bit(10)'::text) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 10) as v2 from tt_citext_of_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'bit(20)'::text) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 20) as v2 from tt_citext_of_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql(v, NULL::varbit) as v2 from tt_citext_of_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'varbit(1)'::text) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 1) as v2 from tt_citext_of_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'varbit(5)'::text) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 5) as v2 from tt_citext_of_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'varbit(10)'::text) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 10) as v2 from tt_citext_of_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'varbit(20)'::text) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 20) as v2 from tt_citext_of_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_date) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::date) as v1, try_convert_by_sql(v, NULL::date) as v2 from tt_citext_of_date) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::time) as v1, try_convert_by_sql(v, NULL::time) as v2 from tt_citext_of_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_timetz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timetz) as v1, try_convert_by_sql(v, NULL::timetz) as v2 from tt_citext_of_timetz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamp) as v1, try_convert_by_sql(v, NULL::timestamp) as v2 from tt_citext_of_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamptz) as v1, try_convert_by_sql(v, NULL::timestamptz) as v2 from tt_citext_of_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::interval) as v1, try_convert_by_sql(v, NULL::interval) as v2 from tt_citext_of_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::abstime) as v1, try_convert_by_sql(v, NULL::abstime) as v2 from tt_citext_of_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_reltime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::reltime) as v1, try_convert_by_sql(v, NULL::reltime) as v2 from tt_citext_of_reltime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_point) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::point) as v1, try_convert_by_sql(v, NULL::point) as v2 from tt_citext_of_point) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::cidr) as v1, try_convert_by_sql(v, NULL::cidr) as v2 from tt_citext_of_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::inet) as v1, try_convert_by_sql(v, NULL::inet) as v2 from tt_citext_of_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_macaddr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::macaddr) as v1, try_convert_by_sql(v, NULL::macaddr) as v2 from tt_citext_of_macaddr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_json) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::json) as v1, try_convert_by_sql(v, NULL::json) as v2 from tt_citext_of_json) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_jsonb) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::jsonb) as v1, try_convert_by_sql(v, NULL::jsonb) as v2 from tt_citext_of_jsonb) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::xml) as v1, try_convert_by_sql(v, NULL::xml) as v2 from tt_citext_of_xml) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_citext_of_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'char(1)'::text) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 1) as v2 from tt_citext_of_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'char(5)'::text) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 5) as v2 from tt_citext_of_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'char(10)'::text) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 10) as v2 from tt_citext_of_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'char(20)'::text) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 20) as v2 from tt_citext_of_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_citext_of_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 1) as v2 from tt_citext_of_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 5) as v2 from tt_citext_of_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 10) as v2 from tt_citext_of_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 20) as v2 from tt_citext_of_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_citext_of_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_money) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::money) as v1, try_convert_by_sql(v, NULL::money) as v2 from tt_citext_of_money) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_uuid) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::uuid) as v1, try_convert_by_sql(v, NULL::uuid) as v2 from tt_citext_of_uuid) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_regtype) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::regtype) as v1, try_convert_by_sql(v, NULL::regtype) as v2 from tt_citext_of_regtype) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_citext_of_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql(v, NULL::int8) as v2 from tt_char_of_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_char_of_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int2) as v1, try_convert_by_sql(v, NULL::int2) as v2 from tt_char_of_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float8) as v1, try_convert_by_sql(v, NULL::float8) as v2 from tt_char_of_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float4) as v1, try_convert_by_sql(v, NULL::float4) as v2 from tt_char_of_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::numeric) as v1, try_convert_by_sql(v, NULL::numeric) as v2 from tt_char_of_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_complex) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::complex) as v1, try_convert_by_sql(v, NULL::complex) as v2 from tt_char_of_complex) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bool) as v1, try_convert_by_sql(v, NULL::bool) as v2 from tt_char_of_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql(v, NULL::bit) as v2 from tt_char_of_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'bit(1)'::text) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 1) as v2 from tt_char_of_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'bit(5)'::text) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 5) as v2 from tt_char_of_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'bit(10)'::text) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 10) as v2 from tt_char_of_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'bit(20)'::text) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 20) as v2 from tt_char_of_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql(v, NULL::varbit) as v2 from tt_char_of_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'varbit(1)'::text) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 1) as v2 from tt_char_of_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'varbit(5)'::text) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 5) as v2 from tt_char_of_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'varbit(10)'::text) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 10) as v2 from tt_char_of_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'varbit(20)'::text) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 20) as v2 from tt_char_of_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_date) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::date) as v1, try_convert_by_sql(v, NULL::date) as v2 from tt_char_of_date) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::time) as v1, try_convert_by_sql(v, NULL::time) as v2 from tt_char_of_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_timetz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timetz) as v1, try_convert_by_sql(v, NULL::timetz) as v2 from tt_char_of_timetz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamp) as v1, try_convert_by_sql(v, NULL::timestamp) as v2 from tt_char_of_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamptz) as v1, try_convert_by_sql(v, NULL::timestamptz) as v2 from tt_char_of_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::interval) as v1, try_convert_by_sql(v, NULL::interval) as v2 from tt_char_of_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::abstime) as v1, try_convert_by_sql(v, NULL::abstime) as v2 from tt_char_of_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_reltime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::reltime) as v1, try_convert_by_sql(v, NULL::reltime) as v2 from tt_char_of_reltime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_point) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::point) as v1, try_convert_by_sql(v, NULL::point) as v2 from tt_char_of_point) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::cidr) as v1, try_convert_by_sql(v, NULL::cidr) as v2 from tt_char_of_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::inet) as v1, try_convert_by_sql(v, NULL::inet) as v2 from tt_char_of_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_macaddr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::macaddr) as v1, try_convert_by_sql(v, NULL::macaddr) as v2 from tt_char_of_macaddr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_json) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::json) as v1, try_convert_by_sql(v, NULL::json) as v2 from tt_char_of_json) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_jsonb) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::jsonb) as v1, try_convert_by_sql(v, NULL::jsonb) as v2 from tt_char_of_jsonb) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::xml) as v1, try_convert_by_sql(v, NULL::xml) as v2 from tt_char_of_xml) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_char_of_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'char(1)'::text) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 1) as v2 from tt_char_of_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'char(5)'::text) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 5) as v2 from tt_char_of_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'char(10)'::text) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 10) as v2 from tt_char_of_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'char(20)'::text) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 20) as v2 from tt_char_of_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_char_of_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 1) as v2 from tt_char_of_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 5) as v2 from tt_char_of_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 10) as v2 from tt_char_of_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 20) as v2 from tt_char_of_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_char_of_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_money) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::money) as v1, try_convert_by_sql(v, NULL::money) as v2 from tt_char_of_money) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_uuid) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::uuid) as v1, try_convert_by_sql(v, NULL::uuid) as v2 from tt_char_of_uuid) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_regtype) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::regtype) as v1, try_convert_by_sql(v, NULL::regtype) as v2 from tt_char_of_regtype) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_char_of_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql(v, NULL::int8) as v2 from tt_varchar_of_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_varchar_of_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int2) as v1, try_convert_by_sql(v, NULL::int2) as v2 from tt_varchar_of_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float8) as v1, try_convert_by_sql(v, NULL::float8) as v2 from tt_varchar_of_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float4) as v1, try_convert_by_sql(v, NULL::float4) as v2 from tt_varchar_of_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::numeric) as v1, try_convert_by_sql(v, NULL::numeric) as v2 from tt_varchar_of_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_complex) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::complex) as v1, try_convert_by_sql(v, NULL::complex) as v2 from tt_varchar_of_complex) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bool) as v1, try_convert_by_sql(v, NULL::bool) as v2 from tt_varchar_of_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql(v, NULL::bit) as v2 from tt_varchar_of_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'bit(1)'::text) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 1) as v2 from tt_varchar_of_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'bit(5)'::text) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 5) as v2 from tt_varchar_of_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'bit(10)'::text) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 10) as v2 from tt_varchar_of_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'bit(20)'::text) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 20) as v2 from tt_varchar_of_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql(v, NULL::varbit) as v2 from tt_varchar_of_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'varbit(1)'::text) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 1) as v2 from tt_varchar_of_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'varbit(5)'::text) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 5) as v2 from tt_varchar_of_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'varbit(10)'::text) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 10) as v2 from tt_varchar_of_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'varbit(20)'::text) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 20) as v2 from tt_varchar_of_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_date) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::date) as v1, try_convert_by_sql(v, NULL::date) as v2 from tt_varchar_of_date) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::time) as v1, try_convert_by_sql(v, NULL::time) as v2 from tt_varchar_of_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_timetz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timetz) as v1, try_convert_by_sql(v, NULL::timetz) as v2 from tt_varchar_of_timetz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamp) as v1, try_convert_by_sql(v, NULL::timestamp) as v2 from tt_varchar_of_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamptz) as v1, try_convert_by_sql(v, NULL::timestamptz) as v2 from tt_varchar_of_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::interval) as v1, try_convert_by_sql(v, NULL::interval) as v2 from tt_varchar_of_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::abstime) as v1, try_convert_by_sql(v, NULL::abstime) as v2 from tt_varchar_of_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_reltime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::reltime) as v1, try_convert_by_sql(v, NULL::reltime) as v2 from tt_varchar_of_reltime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_point) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::point) as v1, try_convert_by_sql(v, NULL::point) as v2 from tt_varchar_of_point) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::cidr) as v1, try_convert_by_sql(v, NULL::cidr) as v2 from tt_varchar_of_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::inet) as v1, try_convert_by_sql(v, NULL::inet) as v2 from tt_varchar_of_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_macaddr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::macaddr) as v1, try_convert_by_sql(v, NULL::macaddr) as v2 from tt_varchar_of_macaddr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_json) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::json) as v1, try_convert_by_sql(v, NULL::json) as v2 from tt_varchar_of_json) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_jsonb) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::jsonb) as v1, try_convert_by_sql(v, NULL::jsonb) as v2 from tt_varchar_of_jsonb) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::xml) as v1, try_convert_by_sql(v, NULL::xml) as v2 from tt_varchar_of_xml) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_varchar_of_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'char(1)'::text) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 1) as v2 from tt_varchar_of_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'char(5)'::text) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 5) as v2 from tt_varchar_of_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'char(10)'::text) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 10) as v2 from tt_varchar_of_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'char(20)'::text) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 20) as v2 from tt_varchar_of_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_varchar_of_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 1) as v2 from tt_varchar_of_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 5) as v2 from tt_varchar_of_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 10) as v2 from tt_varchar_of_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 20) as v2 from tt_varchar_of_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_varchar_of_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_money) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::money) as v1, try_convert_by_sql(v, NULL::money) as v2 from tt_varchar_of_money) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_uuid) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::uuid) as v1, try_convert_by_sql(v, NULL::uuid) as v2 from tt_varchar_of_uuid) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_regtype) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::regtype) as v1, try_convert_by_sql(v, NULL::regtype) as v2 from tt_varchar_of_regtype) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_varchar_of_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

-- FUNCTION TESTS
select * from (select try_convert(v, NULL::int2) as v1, try_convert_by_sql(v, NULL::int2) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '6'::int2) as v1, try_convert_by_sql(v, '6'::int2) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql(v, '9'::int4) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float4) as v1, try_convert_by_sql(v, NULL::float4) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '5.09526'::float4) as v1, try_convert_by_sql(v, '5.09526'::float4) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float8) as v1, try_convert_by_sql(v, NULL::float8) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2.6338905075109076'::float8) as v1, try_convert_by_sql(v, '2.6338905075109076'::float8) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::numeric) as v1, try_convert_by_sql(v, NULL::numeric) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '5.49803593494943'::numeric) as v1, try_convert_by_sql(v, '5.49803593494943'::numeric) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql(v, NULL::int8) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2'::int8) as v1, try_convert_by_sql(v, '2'::int8) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql(v, '9'::int4) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float4) as v1, try_convert_by_sql(v, NULL::float4) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '5.09526'::float4) as v1, try_convert_by_sql(v, '5.09526'::float4) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float8) as v1, try_convert_by_sql(v, NULL::float8) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2.6338905075109076'::float8) as v1, try_convert_by_sql(v, '2.6338905075109076'::float8) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::numeric) as v1, try_convert_by_sql(v, NULL::numeric) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '5.49803593494943'::numeric) as v1, try_convert_by_sql(v, '5.49803593494943'::numeric) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql(v, NULL::int8) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2'::int8) as v1, try_convert_by_sql(v, '2'::int8) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int2) as v1, try_convert_by_sql(v, NULL::int2) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '6'::int2) as v1, try_convert_by_sql(v, '6'::int2) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float4) as v1, try_convert_by_sql(v, NULL::float4) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '5.09526'::float4) as v1, try_convert_by_sql(v, '5.09526'::float4) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float8) as v1, try_convert_by_sql(v, NULL::float8) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2.6338905075109076'::float8) as v1, try_convert_by_sql(v, '2.6338905075109076'::float8) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::numeric) as v1, try_convert_by_sql(v, NULL::numeric) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '5.49803593494943'::numeric) as v1, try_convert_by_sql(v, '5.49803593494943'::numeric) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql(v, NULL::int8) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2'::int8) as v1, try_convert_by_sql(v, '2'::int8) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int2) as v1, try_convert_by_sql(v, NULL::int2) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '6'::int2) as v1, try_convert_by_sql(v, '6'::int2) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql(v, '9'::int4) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float8) as v1, try_convert_by_sql(v, NULL::float8) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2.6338905075109076'::float8) as v1, try_convert_by_sql(v, '2.6338905075109076'::float8) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::numeric) as v1, try_convert_by_sql(v, NULL::numeric) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '5.49803593494943'::numeric) as v1, try_convert_by_sql(v, '5.49803593494943'::numeric) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql(v, NULL::int8) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2'::int8) as v1, try_convert_by_sql(v, '2'::int8) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int2) as v1, try_convert_by_sql(v, NULL::int2) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '6'::int2) as v1, try_convert_by_sql(v, '6'::int2) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql(v, '9'::int4) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float4) as v1, try_convert_by_sql(v, NULL::float4) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '5.09526'::float4) as v1, try_convert_by_sql(v, '5.09526'::float4) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::numeric) as v1, try_convert_by_sql(v, NULL::numeric) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '5.49803593494943'::numeric) as v1, try_convert_by_sql(v, '5.49803593494943'::numeric) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql(v, NULL::int8) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2'::int8) as v1, try_convert_by_sql(v, '2'::int8) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int2) as v1, try_convert_by_sql(v, NULL::int2) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '6'::int2) as v1, try_convert_by_sql(v, '6'::int2) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql(v, '9'::int4) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float4) as v1, try_convert_by_sql(v, NULL::float4) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '5.09526'::float4) as v1, try_convert_by_sql(v, '5.09526'::float4) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::float8) as v1, try_convert_by_sql(v, NULL::float8) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2.6338905075109076'::float8) as v1, try_convert_by_sql(v, '2.6338905075109076'::float8) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::numeric) as v1, try_convert_by_sql(v, NULL::numeric) as v2 from tt_money) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '5.49803593494943'::numeric) as v1, try_convert_by_sql(v, '5.49803593494943'::numeric) as v2 from tt_money) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::money) as v1, try_convert_by_sql(v, NULL::money) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '10'::money) as v1, try_convert_by_sql(v, '10'::money) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::money) as v1, try_convert_by_sql(v, NULL::money) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '10'::money) as v1, try_convert_by_sql(v, '10'::money) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::money) as v1, try_convert_by_sql(v, NULL::money) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '10'::money) as v1, try_convert_by_sql(v, '10'::money) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bool) as v1, try_convert_by_sql(v, NULL::bool) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'f'::bool) as v1, try_convert_by_sql(v, 'f'::bool) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql(v, '9'::int4) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::regtype) as v1, try_convert_by_sql(v, NULL::regtype) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'bool'::regtype) as v1, try_convert_by_sql(v, 'bool'::regtype) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::regtype) as v1, try_convert_by_sql(v, NULL::regtype) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'bool'::regtype) as v1, try_convert_by_sql(v, 'bool'::regtype) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::regtype) as v1, try_convert_by_sql(v, NULL::regtype) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'bool'::regtype) as v1, try_convert_by_sql(v, 'bool'::regtype) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql(v, NULL::int8) as v2 from tt_regtype) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2'::int8) as v1, try_convert_by_sql(v, '2'::int8) as v2 from tt_regtype) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_regtype) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql(v, '9'::int4) as v2 from tt_regtype) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 1) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 5) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 10) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 20) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::varchar) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 1) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 5) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 10) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 20) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::text) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::text, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::text, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::text, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::text, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'char(1)'::text) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'char(5)'::text) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'char(10)'::text) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql_text(v::text, NULL::text, 'char(20)'::text) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::text) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::text, 'char(1)'::text) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::text, 'char(5)'::text) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::text, 'char(10)'::text) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::text, 'char(20)'::text) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 1) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 5) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 10) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 20) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'char(1)'::text) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(1)'::text, 1) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(1)'::text, 5) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(1)'::text, 10) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(1)'::text, 20) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'char(5)'::text) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(5)'::text, 1) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(5)'::text, 5) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(5)'::text, 10) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(5)'::text, 20) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'char(10)'::text) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(10)'::text, 1) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(10)'::text, 5) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(10)'::text, 10) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(10)'::text, 20) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'char(20)'::text) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(20)'::text, 1) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(20)'::text, 5) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(20)'::text, 10) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'char(20)'::text, 20) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::varchar) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 1) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 5) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 10) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 20) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::varchar, 'char(1)'::text) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(1)'::text, 1) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(1)'::text, 5) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(1)'::text, 10) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(1)'::text, 20) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::varchar, 'char(5)'::text) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(5)'::text, 1) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(5)'::text, 5) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(5)'::text, 10) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(5)'::text, 20) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::varchar, 'char(10)'::text) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(10)'::text, 1) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(10)'::text, 5) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(10)'::text, 10) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(10)'::text, 20) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::varchar, 'char(20)'::text) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(20)'::text, 1) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(20)'::text, 5) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(20)'::text, 10) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'char(20)'::text, 20) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 1) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 5) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 10) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 20) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::char) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(1)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::char, 1) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(5)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::char, 5) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(10)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::char, 10) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(20)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::char, 20) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 1) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 5) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 10) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 20) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(1)'::text, 1) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(1)'::text, 5) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(1)'::text, 10) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(1)'::text, 20) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(5)'::text, 1) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(5)'::text, 5) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(5)'::text, 10) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(5)'::text, 20) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(10)'::text, 1) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(10)'::text, 5) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(10)'::text, 10) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(10)'::text, 20) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql_text(v::text, NULL::char, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(20)'::text, 1) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(20)'::text, 5) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(20)'::text, 10) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::char, 'varchar(20)'::text, 20) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::char) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(1)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::char, 1) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(5)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::char, 5) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(10)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::char, 10) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(20)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::char, 20) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::char, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(1)'::text, 1) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(1)'::text, 5) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(1)'::text, 10) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(1)'::text, 20) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::char, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(5)'::text, 1) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(5)'::text, 5) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(5)'::text, 10) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(5)'::text, 20) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::char, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(10)'::text, 1) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(10)'::text, 5) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(10)'::text, 10) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(10)'::text, 20) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::char, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(20)'::text, 1) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(20)'::text, 5) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(20)'::text, 10) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::char, 'varchar(20)'::text, 20) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql_text(v::text, NULL::int4, 'char(1)'::text) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql_text(v::text, NULL::int4, 'char(5)'::text) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql_text(v::text, NULL::int4, 'char(10)'::text) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql_text(v::text, NULL::int4, 'char(20)'::text) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql(v, '9'::int4) as v2 from tt_char) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql_text(v::text, '9'::int4, 'char(1)'::text) as v2 from tt_char_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql_text(v::text, '9'::int4, 'char(5)'::text) as v2 from tt_char_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql_text(v::text, '9'::int4, 'char(10)'::text) as v2 from tt_char_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql_text(v::text, '9'::int4, 'char(20)'::text) as v2 from tt_char_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char) as v1, try_convert_by_sql(v, NULL::char) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 1) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 5) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 10) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::char(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::char, 20) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::char) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(1)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::char, 1) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(5)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::char, 5) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(10)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::char, 10) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::char(20)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::char, 20) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::date) as v1, try_convert_by_sql(v, NULL::date) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28'::date) as v1, try_convert_by_sql(v, '2015-10-28'::date) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::time) as v1, try_convert_by_sql(v, NULL::time) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '13:35:45'::time) as v1, try_convert_by_sql(v, '13:35:45'::time) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamp) as v1, try_convert_by_sql(v, NULL::timestamp) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28 16:35:45'::timestamp) as v1, try_convert_by_sql(v, '2015-10-28 16:35:45'::timestamp) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamptz) as v1, try_convert_by_sql(v, NULL::timestamptz) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28 13:35:45+00:00'::timestamptz) as v1, try_convert_by_sql(v, '2015-10-28 13:35:45+00:00'::timestamptz) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::interval) as v1, try_convert_by_sql(v, NULL::interval) as v2 from tt_reltime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '16736 days, 13:35:45'::interval) as v1, try_convert_by_sql(v, '16736 days, 13:35:45'::interval) as v2 from tt_reltime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamp) as v1, try_convert_by_sql(v, NULL::timestamp) as v2 from tt_date) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28 16:35:45'::timestamp) as v1, try_convert_by_sql(v, '2015-10-28 16:35:45'::timestamp) as v2 from tt_date) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamptz) as v1, try_convert_by_sql(v, NULL::timestamptz) as v2 from tt_date) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28 13:35:45+00:00'::timestamptz) as v1, try_convert_by_sql(v, '2015-10-28 13:35:45+00:00'::timestamptz) as v2 from tt_date) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::interval) as v1, try_convert_by_sql(v, NULL::interval) as v2 from tt_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '16736 days, 13:35:45'::interval) as v1, try_convert_by_sql(v, '16736 days, 13:35:45'::interval) as v2 from tt_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timetz) as v1, try_convert_by_sql(v, NULL::timetz) as v2 from tt_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '13:35:45 UTC'::timetz) as v1, try_convert_by_sql(v, '13:35:45 UTC'::timetz) as v2 from tt_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::abstime) as v1, try_convert_by_sql(v, NULL::abstime) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28 16:35:45'::abstime) as v1, try_convert_by_sql(v, '2015-10-28 16:35:45'::abstime) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::date) as v1, try_convert_by_sql(v, NULL::date) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28'::date) as v1, try_convert_by_sql(v, '2015-10-28'::date) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::time) as v1, try_convert_by_sql(v, NULL::time) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '13:35:45'::time) as v1, try_convert_by_sql(v, '13:35:45'::time) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamptz) as v1, try_convert_by_sql(v, NULL::timestamptz) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28 13:35:45+00:00'::timestamptz) as v1, try_convert_by_sql(v, '2015-10-28 13:35:45+00:00'::timestamptz) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::abstime) as v1, try_convert_by_sql(v, NULL::abstime) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28 16:35:45'::abstime) as v1, try_convert_by_sql(v, '2015-10-28 16:35:45'::abstime) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::date) as v1, try_convert_by_sql(v, NULL::date) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28'::date) as v1, try_convert_by_sql(v, '2015-10-28'::date) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::time) as v1, try_convert_by_sql(v, NULL::time) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '13:35:45'::time) as v1, try_convert_by_sql(v, '13:35:45'::time) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamp) as v1, try_convert_by_sql(v, NULL::timestamp) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28 16:35:45'::timestamp) as v1, try_convert_by_sql(v, '2015-10-28 16:35:45'::timestamp) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timetz) as v1, try_convert_by_sql(v, NULL::timetz) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '13:35:45 UTC'::timetz) as v1, try_convert_by_sql(v, '13:35:45 UTC'::timetz) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::reltime) as v1, try_convert_by_sql(v, NULL::reltime) as v2 from tt_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '16736 days, 13:35:45'::reltime) as v1, try_convert_by_sql(v, '16736 days, 13:35:45'::reltime) as v2 from tt_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::time) as v1, try_convert_by_sql(v, NULL::time) as v2 from tt_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '13:35:45'::time) as v1, try_convert_by_sql(v, '13:35:45'::time) as v2 from tt_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::time) as v1, try_convert_by_sql(v, NULL::time) as v2 from tt_timetz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '13:35:45'::time) as v1, try_convert_by_sql(v, '13:35:45'::time) as v2 from tt_timetz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::abstime) as v1, try_convert_by_sql(v, NULL::abstime) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28 16:35:45'::abstime) as v1, try_convert_by_sql(v, '2015-10-28 16:35:45'::abstime) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql(v, '9'::int4) as v2 from tt_abstime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::reltime) as v1, try_convert_by_sql(v, NULL::reltime) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '16736 days, 13:35:45'::reltime) as v1, try_convert_by_sql(v, '16736 days, 13:35:45'::reltime) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_reltime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql(v, '9'::int4) as v2 from tt_reltime) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::inet) as v1, try_convert_by_sql(v, NULL::inet) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '192.168.100.128/25'::inet) as v1, try_convert_by_sql(v, '192.168.100.128/25'::inet) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::cidr) as v1, try_convert_by_sql(v, NULL::cidr) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '192.168.100.128/25'::cidr) as v1, try_convert_by_sql(v, '192.168.100.128/25'::cidr) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql(v, NULL::varbit) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 1) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 5) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 10) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 20) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql_text(v::text, NULL::varbit, 'bit(1)'::text) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(1)'::text, 1) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(1)'::text, 5) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(1)'::text, 10) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(1)'::text, 20) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql_text(v::text, NULL::varbit, 'bit(5)'::text) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(5)'::text, 1) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(5)'::text, 5) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(5)'::text, 10) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(5)'::text, 20) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql_text(v::text, NULL::varbit, 'bit(10)'::text) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(10)'::text, 1) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(10)'::text, 5) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(10)'::text, 10) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(10)'::text, 20) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql_text(v::text, NULL::varbit, 'bit(20)'::text) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(20)'::text, 1) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(20)'::text, 5) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(20)'::text, 10) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'bit(20)'::text, 20) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit) as v1, try_convert_by_sql(v, '1'::varbit) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(1)) as v1, try_convert_by_sql_with_len_out(v, '1'::varbit, 1) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(5)) as v1, try_convert_by_sql_with_len_out(v, '1'::varbit, 5) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(10)) as v1, try_convert_by_sql_with_len_out(v, '1'::varbit, 10) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(20)) as v1, try_convert_by_sql_with_len_out(v, '1'::varbit, 20) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit) as v1, try_convert_by_sql_text(v::text, '1'::varbit, 'bit(1)'::text) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(1)'::text, 1) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(1)'::text, 5) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(1)'::text, 10) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(1)'::text, 20) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit) as v1, try_convert_by_sql_text(v::text, '1'::varbit, 'bit(5)'::text) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(5)'::text, 1) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(5)'::text, 5) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(5)'::text, 10) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(5)'::text, 20) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit) as v1, try_convert_by_sql_text(v::text, '1'::varbit, 'bit(10)'::text) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(10)'::text, 1) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(10)'::text, 5) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(10)'::text, 10) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(10)'::text, 20) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit) as v1, try_convert_by_sql_text(v::text, '1'::varbit, 'bit(20)'::text) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(20)'::text, 1) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(20)'::text, 5) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(20)'::text, 10) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'bit(20)'::text, 20) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql(v, NULL::bit) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 1) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 5) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 10) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 20) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql_text(v::text, NULL::bit, 'varbit(1)'::text) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(1)'::text, 1) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(1)'::text, 5) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(1)'::text, 10) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(1)'::text, 20) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql_text(v::text, NULL::bit, 'varbit(5)'::text) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(5)'::text, 1) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(5)'::text, 5) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(5)'::text, 10) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(5)'::text, 20) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql_text(v::text, NULL::bit, 'varbit(10)'::text) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(10)'::text, 1) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(10)'::text, 5) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(10)'::text, 10) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(10)'::text, 20) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql_text(v::text, NULL::bit, 'varbit(20)'::text) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(20)'::text, 1) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(20)'::text, 5) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(20)'::text, 10) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'varbit(20)'::text, 20) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit) as v1, try_convert_by_sql(v, '1'::bit) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(1)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 1) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(5)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 5) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(10)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 10) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(20)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 20) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit) as v1, try_convert_by_sql_text(v::text, '1'::bit, 'varbit(1)'::text) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(1)'::text, 1) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(1)'::text, 5) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(1)'::text, 10) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(1)'::text, 20) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit) as v1, try_convert_by_sql_text(v::text, '1'::bit, 'varbit(5)'::text) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(5)'::text, 1) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(5)'::text, 5) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(5)'::text, 10) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(5)'::text, 20) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit) as v1, try_convert_by_sql_text(v::text, '1'::bit, 'varbit(10)'::text) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(10)'::text, 1) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(10)'::text, 5) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(10)'::text, 10) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(10)'::text, 20) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit) as v1, try_convert_by_sql_text(v::text, '1'::bit, 'varbit(20)'::text) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(20)'::text, 1) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(20)'::text, 5) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(20)'::text, 10) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'varbit(20)'::text, 20) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql(v, NULL::bit) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 1) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 5) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 10) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 20) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit) as v1, try_convert_by_sql(v, '1'::bit) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(1)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 1) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(5)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 5) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(10)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 10) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(20)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 20) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql(v, NULL::bit) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 1) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 5) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 10) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 20) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit) as v1, try_convert_by_sql(v, '1'::bit) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(1)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 1) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(5)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 5) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(10)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 10) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(20)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 20) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql(v, NULL::int8) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql_text(v::text, NULL::int8, 'bit(1)'::text) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql_text(v::text, NULL::int8, 'bit(5)'::text) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql_text(v::text, NULL::int8, 'bit(10)'::text) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int8) as v1, try_convert_by_sql_text(v::text, NULL::int8, 'bit(20)'::text) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2'::int8) as v1, try_convert_by_sql(v, '2'::int8) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2'::int8) as v1, try_convert_by_sql_text(v::text, '2'::int8, 'bit(1)'::text) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2'::int8) as v1, try_convert_by_sql_text(v::text, '2'::int8, 'bit(5)'::text) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2'::int8) as v1, try_convert_by_sql_text(v::text, '2'::int8, 'bit(10)'::text) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2'::int8) as v1, try_convert_by_sql_text(v::text, '2'::int8, 'bit(20)'::text) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql(v, NULL::int4) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql_text(v::text, NULL::int4, 'bit(1)'::text) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql_text(v::text, NULL::int4, 'bit(5)'::text) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql_text(v::text, NULL::int4, 'bit(10)'::text) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::int4) as v1, try_convert_by_sql_text(v::text, NULL::int4, 'bit(20)'::text) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql(v, '9'::int4) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql_text(v::text, '9'::int4, 'bit(1)'::text) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql_text(v::text, '9'::int4, 'bit(5)'::text) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql_text(v::text, '9'::int4, 'bit(10)'::text) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '9'::int4) as v1, try_convert_by_sql_text(v::text, '9'::int4, 'bit(20)'::text) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::text) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::text) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::text) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::text) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::xml) as v1, try_convert_by_sql(v, NULL::xml) as v2 from tt_text) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '<menu id="file" value="File"> <popup> <menuitem value="New" onclick="CreateNewDoc()" /> <menuitem value="Open" onclick="OpenDoc()" /> <menuitem value="Close" onclick="CloseDoc()" /> </popup> </menu>'::xml) as v1, try_convert_by_sql(v, '<menu id="file" value="File"> <popup> <menuitem value="New" onclick="CreateNewDoc()" /> <menuitem value="Open" onclick="OpenDoc()" /> <menuitem value="Close" onclick="CloseDoc()" /> </popup> </menu>'::xml) as v2 from tt_text) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 1) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 5) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 10) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 20) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::varchar) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 1) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 5) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 10) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 20) as v2 from tt_cidr) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 1) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 5) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 10) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 20) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::varchar) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 1) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 5) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 10) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 20) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 1) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 5) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 10) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 20) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::varchar) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 1) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 5) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 10) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 20) as v2 from tt_bool) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 1) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 5) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 10) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 20) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::varchar) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 1) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 5) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 10) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 20) as v2 from tt_xml) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::xml) as v1, try_convert_by_sql(v, NULL::xml) as v2 from tt_varchar) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::xml) as v1, try_convert_by_sql_text(v::text, NULL::xml, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::xml) as v1, try_convert_by_sql_text(v::text, NULL::xml, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::xml) as v1, try_convert_by_sql_text(v::text, NULL::xml, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::xml) as v1, try_convert_by_sql_text(v::text, NULL::xml, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '<menu id="file" value="File"> <popup> <menuitem value="New" onclick="CreateNewDoc()" /> <menuitem value="Open" onclick="OpenDoc()" /> <menuitem value="Close" onclick="CloseDoc()" /> </popup> </menu>'::xml) as v1, try_convert_by_sql(v, '<menu id="file" value="File"> <popup> <menuitem value="New" onclick="CreateNewDoc()" /> <menuitem value="Open" onclick="OpenDoc()" /> <menuitem value="Close" onclick="CloseDoc()" /> </popup> </menu>'::xml) as v2 from tt_varchar) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '<menu id="file" value="File"> <popup> <menuitem value="New" onclick="CreateNewDoc()" /> <menuitem value="Open" onclick="OpenDoc()" /> <menuitem value="Close" onclick="CloseDoc()" /> </popup> </menu>'::xml) as v1, try_convert_by_sql_text(v::text, '<menu id="file" value="File"> <popup> <menuitem value="New" onclick="CreateNewDoc()" /> <menuitem value="Open" onclick="OpenDoc()" /> <menuitem value="Close" onclick="CloseDoc()" /> </popup> </menu>'::xml, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '<menu id="file" value="File"> <popup> <menuitem value="New" onclick="CreateNewDoc()" /> <menuitem value="Open" onclick="OpenDoc()" /> <menuitem value="Close" onclick="CloseDoc()" /> </popup> </menu>'::xml) as v1, try_convert_by_sql_text(v::text, '<menu id="file" value="File"> <popup> <menuitem value="New" onclick="CreateNewDoc()" /> <menuitem value="Open" onclick="OpenDoc()" /> <menuitem value="Close" onclick="CloseDoc()" /> </popup> </menu>'::xml, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '<menu id="file" value="File"> <popup> <menuitem value="New" onclick="CreateNewDoc()" /> <menuitem value="Open" onclick="OpenDoc()" /> <menuitem value="Close" onclick="CloseDoc()" /> </popup> </menu>'::xml) as v1, try_convert_by_sql_text(v::text, '<menu id="file" value="File"> <popup> <menuitem value="New" onclick="CreateNewDoc()" /> <menuitem value="Open" onclick="OpenDoc()" /> <menuitem value="Close" onclick="CloseDoc()" /> </popup> </menu>'::xml, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '<menu id="file" value="File"> <popup> <menuitem value="New" onclick="CreateNewDoc()" /> <menuitem value="Open" onclick="OpenDoc()" /> <menuitem value="Close" onclick="CloseDoc()" /> </popup> </menu>'::xml) as v1, try_convert_by_sql_text(v::text, '<menu id="file" value="File"> <popup> <menuitem value="New" onclick="CreateNewDoc()" /> <menuitem value="Open" onclick="OpenDoc()" /> <menuitem value="Close" onclick="CloseDoc()" /> </popup> </menu>'::xml, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 1) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 5) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 10) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 20) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(1)'::text, 1) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(1)'::text, 5) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(1)'::text, 10) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(1)'::text, 20) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(5)'::text, 1) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(5)'::text, 5) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(5)'::text, 10) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(5)'::text, 20) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(10)'::text, 1) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(10)'::text, 5) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(10)'::text, 10) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(10)'::text, 20) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql_text(v::text, NULL::varchar, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(20)'::text, 1) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(20)'::text, 5) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(20)'::text, 10) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varchar, 'varchar(20)'::text, 20) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::varchar) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 1) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 5) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 10) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 20) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::varchar, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(1)'::text, 1) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(1)'::text, 5) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(1)'::text, 10) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(1)'::text, 20) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::varchar, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(5)'::text, 1) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(5)'::text, 5) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(5)'::text, 10) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(5)'::text, 20) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::varchar, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(10)'::text, 1) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(10)'::text, 5) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(10)'::text, 10) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(10)'::text, 20) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::varchar, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(20)'::text, 1) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(20)'::text, 5) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(20)'::text, 10) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, 'All the worlds a stage,'::varchar, 'varchar(20)'::text, 20) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::time) as v1, try_convert_by_sql(v, NULL::time) as v2 from tt_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '13:35:45'::time) as v1, try_convert_by_sql(v, '13:35:45'::time) as v2 from tt_time) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamp) as v1, try_convert_by_sql(v, NULL::timestamp) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28 16:35:45'::timestamp) as v1, try_convert_by_sql(v, '2015-10-28 16:35:45'::timestamp) as v2 from tt_timestamp) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timestamptz) as v1, try_convert_by_sql(v, NULL::timestamptz) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '2015-10-28 13:35:45+00:00'::timestamptz) as v1, try_convert_by_sql(v, '2015-10-28 13:35:45+00:00'::timestamptz) as v2 from tt_timestamptz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::interval) as v1, try_convert_by_sql(v, NULL::interval) as v2 from tt_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '16736 days, 13:35:45'::interval) as v1, try_convert_by_sql(v, '16736 days, 13:35:45'::interval) as v2 from tt_interval) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::timetz) as v1, try_convert_by_sql(v, NULL::timetz) as v2 from tt_timetz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '13:35:45 UTC'::timetz) as v1, try_convert_by_sql(v, '13:35:45 UTC'::timetz) as v2 from tt_timetz) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql(v, NULL::bit) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 1) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 5) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 10) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::bit, 20) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql_text(v::text, NULL::bit, 'bit(1)'::text) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(1)'::text, 1) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(1)'::text, 5) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(1)'::text, 10) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(1)'::text, 20) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql_text(v::text, NULL::bit, 'bit(5)'::text) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(5)'::text, 1) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(5)'::text, 5) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(5)'::text, 10) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(5)'::text, 20) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql_text(v::text, NULL::bit, 'bit(10)'::text) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(10)'::text, 1) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(10)'::text, 5) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(10)'::text, 10) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(10)'::text, 20) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit) as v1, try_convert_by_sql_text(v::text, NULL::bit, 'bit(20)'::text) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(20)'::text, 1) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(20)'::text, 5) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(20)'::text, 10) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::bit, 'bit(20)'::text, 20) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit) as v1, try_convert_by_sql(v, '1'::bit) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(1)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 1) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(5)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 5) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(10)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 10) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(20)) as v1, try_convert_by_sql_with_len_out(v, '1'::bit, 20) as v2 from tt_bit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit) as v1, try_convert_by_sql_text(v::text, '1'::bit, 'bit(1)'::text) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(1)'::text, 1) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(1)'::text, 5) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(1)'::text, 10) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(1)'::text, 20) as v2 from tt_bit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit) as v1, try_convert_by_sql_text(v::text, '1'::bit, 'bit(5)'::text) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(5)'::text, 1) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(5)'::text, 5) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(5)'::text, 10) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(5)'::text, 20) as v2 from tt_bit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit) as v1, try_convert_by_sql_text(v::text, '1'::bit, 'bit(10)'::text) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(10)'::text, 1) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(10)'::text, 5) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(10)'::text, 10) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(10)'::text, 20) as v2 from tt_bit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit) as v1, try_convert_by_sql_text(v::text, '1'::bit, 'bit(20)'::text) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(20)'::text, 1) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(20)'::text, 5) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(20)'::text, 10) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::bit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::bit, 'bit(20)'::text, 20) as v2 from tt_bit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql(v, NULL::varbit) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 1) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 5) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 10) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varbit, 20) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql_text(v::text, NULL::varbit, 'varbit(1)'::text) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(1)'::text, 1) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(1)'::text, 5) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(1)'::text, 10) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(1)'::text, 20) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql_text(v::text, NULL::varbit, 'varbit(5)'::text) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(5)'::text, 1) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(5)'::text, 5) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(5)'::text, 10) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(5)'::text, 20) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql_text(v::text, NULL::varbit, 'varbit(10)'::text) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(10)'::text, 1) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(10)'::text, 5) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(10)'::text, 10) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(10)'::text, 20) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit) as v1, try_convert_by_sql_text(v::text, NULL::varbit, 'varbit(20)'::text) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(20)'::text, 1) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(20)'::text, 5) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(20)'::text, 10) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, NULL::varbit, 'varbit(20)'::text, 20) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit) as v1, try_convert_by_sql(v, '1'::varbit) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(1)) as v1, try_convert_by_sql_with_len_out(v, '1'::varbit, 1) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(5)) as v1, try_convert_by_sql_with_len_out(v, '1'::varbit, 5) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(10)) as v1, try_convert_by_sql_with_len_out(v, '1'::varbit, 10) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(20)) as v1, try_convert_by_sql_with_len_out(v, '1'::varbit, 20) as v2 from tt_varbit) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit) as v1, try_convert_by_sql_text(v::text, '1'::varbit, 'varbit(1)'::text) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(1)'::text, 1) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(1)'::text, 5) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(1)'::text, 10) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(1)'::text, 20) as v2 from tt_varbit_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit) as v1, try_convert_by_sql_text(v::text, '1'::varbit, 'varbit(5)'::text) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(5)'::text, 1) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(5)'::text, 5) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(5)'::text, 10) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(5)'::text, 20) as v2 from tt_varbit_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit) as v1, try_convert_by_sql_text(v::text, '1'::varbit, 'varbit(10)'::text) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(10)'::text, 1) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(10)'::text, 5) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(10)'::text, 10) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(10)'::text, 20) as v2 from tt_varbit_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit) as v1, try_convert_by_sql_text(v::text, '1'::varbit, 'varbit(20)'::text) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(1)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(20)'::text, 1) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(5)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(20)'::text, 5) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(10)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(20)'::text, 10) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1'::varbit(20)) as v1, try_convert_by_sql_text_with_len_out(v::text, '1'::varbit, 'varbit(20)'::text, 20) as v2 from tt_varbit_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::numeric) as v1, try_convert_by_sql(v, NULL::numeric) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '5.49803593494943'::numeric) as v1, try_convert_by_sql(v, '5.49803593494943'::numeric) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::jsonb) as v1, try_convert_by_sql(v, NULL::jsonb) as v2 from tt_json) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '{"glossary": {"title": "example glossary","GlossDiv": {"title": "S","GlossList": {"GlossEntry": {"ID": "SGML","SortAs": "SGML","GlossTerm": "Standard Generalized Markup Language","Acronym": "SGML","Abbrev": "ISO 8879:1986","GlossDef": {"para": "A meta-markup language, used to create markup languages such as DocBook.","GlossSeeAlso": ["GML", "XML"]},"GlossSee": "markup"}}}}}'::jsonb) as v1, try_convert_by_sql(v, '{"glossary": {"title": "example glossary","GlossDiv": {"title": "S","GlossList": {"GlossEntry": {"ID": "SGML","SortAs": "SGML","GlossTerm": "Standard Generalized Markup Language","Acronym": "SGML","Abbrev": "ISO 8879:1986","GlossDef": {"para": "A meta-markup language, used to create markup languages such as DocBook.","GlossSeeAlso": ["GML", "XML"]},"GlossSee": "markup"}}}}}'::jsonb) as v2 from tt_json) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::json) as v1, try_convert_by_sql(v, NULL::json) as v2 from tt_jsonb) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '{"glossary": {"title": "example glossary","GlossDiv": {"title": "S","GlossList": {"GlossEntry": {"ID": "SGML","SortAs": "SGML","GlossTerm": "Standard Generalized Markup Language","Acronym": "SGML","Abbrev": "ISO 8879:1986","GlossDef": {"para": "A meta-markup language, used to create markup languages such as DocBook.","GlossSeeAlso": ["GML", "XML"]},"GlossSee": "markup"}}}}}'::json) as v1, try_convert_by_sql(v, '{"glossary": {"title": "example glossary","GlossDiv": {"title": "S","GlossList": {"GlossEntry": {"ID": "SGML","SortAs": "SGML","GlossTerm": "Standard Generalized Markup Language","Acronym": "SGML","Abbrev": "ISO 8879:1986","GlossDef": {"para": "A meta-markup language, used to create markup languages such as DocBook.","GlossSeeAlso": ["GML", "XML"]},"GlossSee": "markup"}}}}}'::json) as v2 from tt_jsonb) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::complex) as v1, try_convert_by_sql(v, NULL::complex) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1.1 + 1.0i'::complex) as v1, try_convert_by_sql(v, '1.1 + 1.0i'::complex) as v2 from tt_float8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::complex) as v1, try_convert_by_sql(v, NULL::complex) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1.1 + 1.0i'::complex) as v1, try_convert_by_sql(v, '1.1 + 1.0i'::complex) as v2 from tt_float4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::complex) as v1, try_convert_by_sql(v, NULL::complex) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1.1 + 1.0i'::complex) as v1, try_convert_by_sql(v, '1.1 + 1.0i'::complex) as v2 from tt_int8) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::complex) as v1, try_convert_by_sql(v, NULL::complex) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1.1 + 1.0i'::complex) as v1, try_convert_by_sql(v, '1.1 + 1.0i'::complex) as v2 from tt_int4) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::complex) as v1, try_convert_by_sql(v, NULL::complex) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1.1 + 1.0i'::complex) as v1, try_convert_by_sql(v, '1.1 + 1.0i'::complex) as v2 from tt_int2) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::complex) as v1, try_convert_by_sql(v, NULL::complex) as v2 from tt_point) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1.1 + 1.0i'::complex) as v1, try_convert_by_sql(v, '1.1 + 1.0i'::complex) as v2 from tt_point) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::point) as v1, try_convert_by_sql(v, NULL::point) as v2 from tt_complex) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '(1, 2)'::point) as v1, try_convert_by_sql(v, '(1, 2)'::point) as v2 from tt_complex) as t(v1, v2) where v1::text is distinct from  v2::text;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::complex) as v1, try_convert_by_sql(v, NULL::complex) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, '1.1 + 1.0i'::complex) as v1, try_convert_by_sql(v, '1.1 + 1.0i'::complex) as v2 from tt_numeric) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::text) as v1, try_convert_by_sql(v, NULL::text) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::text) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::text) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar) as v1, try_convert_by_sql(v, NULL::varchar) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 1) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 5) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 10) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, NULL::varchar, 20) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::varchar) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(1)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 1) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(5)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 5) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(10)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 10) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::varchar(20)) as v1, try_convert_by_sql_with_len_out(v, 'All the worlds a stage,'::varchar, 20) as v2 from tt_citext) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::citext) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::citext) as v2 from tt_text) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql_text(v::text, NULL::citext, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::citext) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::citext) as v2 from tt_varchar) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::citext) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::citext, 'varchar(1)'::text) as v2 from tt_varchar_1) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::citext) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::citext, 'varchar(5)'::text) as v2 from tt_varchar_5) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::citext) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::citext, 'varchar(10)'::text) as v2 from tt_varchar_10) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::citext) as v1, try_convert_by_sql_text(v::text, 'All the worlds a stage,'::citext, 'varchar(20)'::text) as v2 from tt_varchar_20) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, NULL::citext) as v1, try_convert_by_sql(v, NULL::citext) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

select * from (select try_convert(v, 'All the worlds a stage,'::citext) as v1, try_convert_by_sql(v, 'All the worlds a stage,'::citext) as v2 from tt_inet) as t(v1, v2) where v1 is distinct from v2;
 v1 | v2 
----+----
(0 rows)

-- MILLION TESTS
DROP TABLE IF EXISTS text_ints; CREATE TABLE text_ints (v text) DISTRIBUTED BY (v);
INSERT INTO text_ints(v) SELECT (random()*1000)::int4::text FROM generate_series(1,1000000);
DROP TABLE IF EXISTS text_error_ints; CREATE TABLE text_error_ints (v text) DISTRIBUTED BY (v);
INSERT INTO text_error_ints(v) SELECT (random()*1000000 + 1000000)::int8::text FROM generate_series(1,1000000);
DROP TABLE IF EXISTS int4_ints; CREATE TABLE int4_ints (v int4) DISTRIBUTED BY (v);
INSERT INTO int4_ints(v) SELECT (random()*1000)::int4 FROM generate_series(1,1000000);
DROP TABLE IF EXISTS int4_error_ints; CREATE TABLE int4_error_ints (v int4) DISTRIBUTED BY (v);
INSERT INTO int4_error_ints(v) SELECT (random()*1000000 + 1000000)::int4 FROM generate_series(1,1000000);
SELECT count(*) FROM (SELECT try_convert(v, NULL::int2) as v FROM text_ints) as t(v) WHERE v IS NOT NULL;
  count  
---------
 1000000
(1 row)

SELECT count(*) FROM (SELECT try_convert(v, NULL::int2) as v FROM text_error_ints) as t(v) WHERE v IS NULL;
  count  
---------
 1000000
(1 row)

SELECT count(*) FROM (SELECT try_convert(v, NULL::int2) as v FROM int4_ints) as t(v) WHERE v IS NOT NULL;
  count  
---------
 1000000
(1 row)

SELECT count(*) FROM (SELECT try_convert(v, NULL::int2) as v FROM int4_error_ints) as t(v) WHERE v IS NULL;
  count  
---------
 1000000
(1 row)

-- NESTED TESTS
select try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(try_convert(42::int4, NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4), NULL::text), NULL::int4) as v;
 v  
----
 42
(1 row)

reset search_path;
